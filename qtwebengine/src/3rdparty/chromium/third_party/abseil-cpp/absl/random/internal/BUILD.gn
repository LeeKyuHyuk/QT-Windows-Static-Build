# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/abseil-cpp/absl.gni")

absl_source_set("traits") {
  public = [ "traits.h" ]
  visibility = []
  visibility += [ "../../random/*" ]
  deps = [ "../../base:config" ]
}

absl_source_set("distribution_caller") {
  public = [ "distribution_caller.h" ]
  visibility = []
  visibility += [ "../../random/*" ]
  deps = [ "../../base:config" ]
}

absl_source_set("distributions") {
  public = [ "distributions.h" ]
  deps = [
    ":distribution_caller",
    ":traits",
    ":uniform_helper",
    "../../base",
    "../../meta:type_traits",
    "../../strings",
  ]
}

absl_source_set("fast_uniform_bits") {
  public = [ "fast_uniform_bits.h" ]
  visibility = []
  visibility += [ "../../random/*" ]
  deps = [ "../../base:config" ]
}

absl_source_set("seed_material") {
  public = [ "seed_material.h" ]
  sources = [ "seed_material.cc" ]
  if (is_win) {
    # TODO(mbonadei): In the bazel file this is -DEFAULTLIB:bcrypt.lib.
    libs = [ "bcrypt.lib" ]
  }
  deps = [
    ":fast_uniform_bits",
    "../../base:core_headers",
    "../../base:raw_logging_internal",
    "../../strings",
    "../../types:optional",
    "../../types:span",
  ]
}

absl_source_set("pool_urbg") {
  public = [ "pool_urbg.h" ]
  sources = [ "pool_urbg.cc" ]
  deps = [
    ":randen",
    ":seed_material",
    ":traits",
    "../../base",
    "../../base:config",
    "../../base:core_headers",
    "../../base:endian",
    "../../base:raw_logging_internal",
    "../../random:seed_gen_exception",
    "../../types:span",
  ]
}

absl_source_set("explicit_seed_seq") {
  testonly = true
  public = [ "explicit_seed_seq.h" ]
  deps = [ "../../base:config" ]
}

absl_source_set("sequence_urbg") {
  testonly = true
  public = [ "sequence_urbg.h" ]
  deps = [ "../../base:config" ]
}

absl_source_set("salted_seed_seq") {
  public = [ "salted_seed_seq.h" ]
  deps = [
    ":seed_material",
    "../../container:inlined_vector",
    "../../meta:type_traits",
    "../../types:optional",
    "../../types:span",
  ]
}

absl_source_set("iostream_state_saver") {
  public = [ "iostream_state_saver.h" ]
  deps = [
    "../../meta:type_traits",
    "../../numeric:int128",
  ]
}

absl_source_set("generate_real") {
  public = [ "generate_real.h" ]
  deps = [
    ":fastmath",
    ":traits",
    "../../base:bits",
    "../../meta:type_traits",
  ]
}

absl_source_set("fastmath") {
  public = [ "fastmath.h" ]
  deps = [ "../../base:bits" ]
}

absl_source_set("wide_multiply") {
  public = [ "wide_multiply.h" ]
  deps = [
    ":traits",
    "../../base:bits",
    "../../base:config",
    "../../numeric:int128",
  ]
}

absl_source_set("nonsecure_base") {
  public = [ "nonsecure_base.h" ]
  deps = [
    ":pool_urbg",
    ":salted_seed_seq",
    ":seed_material",
    "../../base:core_headers",
    "../../meta:type_traits",
    "../../strings",
    "../../types:optional",
    "../../types:span",
  ]
}

absl_source_set("pcg_engine") {
  public = [ "pcg_engine.h" ]
  deps = [
    ":fastmath",
    ":iostream_state_saver",
    "../../base:config",
    "../../meta:type_traits",
    "../../numeric:int128",
  ]
}

absl_source_set("randen_engine") {
  public = [ "randen_engine.h" ]
  deps = [
    ":iostream_state_saver",
    ":randen",
    "../../meta:type_traits",
  ]
}

absl_source_set("platform") {
  public = [
    "platform.h",
    "randen-keys.inc",
    "randen_traits.h",
  ]
  deps = [ "../../base:config" ]
}

absl_source_set("randen") {
  public = [ "randen.h" ]
  sources = [ "randen.cc" ]
  deps = [
    ":platform",
    ":randen_hwaes",
    ":randen_slow",
    "../../base:raw_logging_internal",
  ]
}

absl_source_set("randen_slow") {
  public = [ "randen_slow.h" ]
  sources = [ "randen_slow.cc" ]
  deps = [
    ":platform",
    "../../base:config",
    "../../base:core_headers",
  ]
}

absl_source_set("randen_hwaes") {
  public = [
    "randen_detect.h",
    "randen_hwaes.h",
  ]
  sources = [ "randen_detect.cc" ]
  deps = [
    ":platform",
    ":randen_hwaes_impl",
    "../../base:config",
  ]
}

absl_source_set("randen_hwaes_impl") {
  sources = [
    "randen_hwaes.cc",
    "randen_hwaes.h",
  ]
  deps = [
    ":platform",
    "../../base:config",
    "../../base:core_headers",
  ]
}

executable("gaussian_distribution_gentables") {
  sources = [ "gaussian_distribution_gentables.cc" ]
  deps = [
    "../../base:core_headers",
    "../../random:distributions",
  ]
}

absl_source_set("distribution_test_util") {
  testonly = true
  public = [
    "chi_square.h",
    "distribution_test_util.h",
  ]
  sources = [
    "chi_square.cc",
    "distribution_test_util.cc",
  ]
  deps = [
    "../../base:config",
    "../../base:core_headers",
    "../../base:raw_logging_internal",
    "../../strings",
    "../../strings:str_format",
    "../../types:span",
  ]
}

absl_source_set("mocking_bit_gen_base") {
  public = [ "mocking_bit_gen_base.h" ]
  deps = [
    "../../random",
    "../../strings",
  ]
}

absl_source_set("nanobenchmark") {
  sources = [ "nanobenchmark.cc" ]
  deps = [
    ":platform",
    ":randen_engine",
    "../../base:core_headers",
    "../../base:raw_logging_internal",
  ]
}

absl_source_set("uniform_helper") {
  public = [ "uniform_helper.h" ]
  deps = [ "../../meta:type_traits" ]
}
